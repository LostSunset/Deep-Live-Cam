name: Backup Fork and Sync

on:
  schedule:
    - cron: '0 0 * * 1'  # 每週日午夜執行
  workflow_dispatch:  # 允許手動觸發

env:
  UPSTREAM_REPO: ${{ vars.UPSTREAM_REPO || 'https://github.com/hacksider/Deep-Live-Cam.git' }}
  MAIN_BRANCH: ${{ vars.MAIN_BRANCH || 'main' }}

jobs:
  backup-and-sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ secrets.PAT_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Tag current state
        run: |
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          git tag -a "pre-sync-$TIMESTAMP" -m "Pre-sync state on $TIMESTAMP"
          git push origin "pre-sync-$TIMESTAMP"

      - name: Add upstream repository
        run: |
          git remote add upstream ${{ env.UPSTREAM_REPO }} || git remote set-url upstream ${{ env.UPSTREAM_REPO }}
          git fetch --all --tags

      # 同步上游的標籤
      - name: Sync tags from upstream
        run: |
          echo "Syncing tags from upstream..."
          # 保存同步狀態標籤
          SYNC_TAGS=$(git tag -l "pre-sync-*" "post-sync-*")
          # 刪除非同步狀態的標籤
          git tag -l | grep -v "^pre-sync-\|^post-sync-" | xargs -r git tag -d
          # 獲取上游標籤
          git fetch upstream --tags
          # 重新添加同步狀態標籤（如果有）
          if [ ! -z "$SYNC_TAGS" ]; then
            echo "$SYNC_TAGS" | while read tag; do
              git tag -f "$tag" $(git rev-list -n 1 "$tag")
            done
          fi
          # 推送所有標籤
          git push origin --tags --force

      - name: Sync and handle conflicts
        run: |
          branches=$(git branch -r | grep 'origin/' | grep -v 'origin/HEAD' | sed 's/origin\///')

          for branch in $branches; do
            echo "Processing branch: $branch"

            if git ls-remote --exit-code --heads upstream $branch > /dev/null 2>&1; then
              # Force reset the branch to its remote state
              git checkout -B $branch origin/$branch --force
              
              # Forcefully remove untracked files and directories
              git clean -fdx
              
              # Reset any changes in tracked files
              git reset --hard origin/$branch

              echo "Changes in upstream $branch:"
              git log --oneline $branch..upstream/$branch

              if git merge upstream/$branch --no-edit --allow-unrelated-histories; then
                echo "Successfully merged changes for $branch"
              else
                echo "Merge conflict in $branch. Creating a new branch with upstream changes."
                git merge --abort
                conflict_branch="${branch}-upstream-changes"
                git checkout -b $conflict_branch upstream/$branch
                echo "Created new branch $conflict_branch with upstream changes"
                git push origin $conflict_branch
                echo "Please manually review and merge changes from $conflict_branch into $branch"
                git checkout $branch
              fi
              git push origin $branch || echo "Failed to push $branch, please check and push manually if needed"
            else
              echo "Branch $branch does not exist in upstream. Skipping."
            fi
          done

      - name: Create post-sync version tag
        run: |
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          git tag -a "post-sync-$TIMESTAMP" -m "Post-sync state on $TIMESTAMP"
          git push origin "post-sync-$TIMESTAMP"

      - name: Generate sync report
        if: always()
        run: |
          echo "Sync Report" > sync_report.md
          echo "===========" >> sync_report.md
          echo "" >> sync_report.md
          echo "## Tags Sync Status" >> sync_report.md
          echo "Upstream tags:" >> sync_report.md
          git ls-remote --tags upstream | awk '{print $2}' | sed 's/refs\/tags\///' >> sync_report.md
          echo "" >> sync_report.md
          echo "Local tags:" >> sync_report.md
          git tag -l >> sync_report.md
          echo "" >> sync_report.md
          git branch -r | grep 'origin/' | grep -v 'origin/HEAD' | sed 's/origin\///' | while read branch; do
            echo "## Branch: $branch" >> sync_report.md
            if git log HEAD..origin/$branch --oneline | grep -q .; then
              echo "Status: Changes synced" >> sync_report.md
              echo "Changes:" >> sync_report.md
              git log HEAD..origin/$branch --oneline >> sync_report.md
            else
              echo "Status: No changes or sync failed" >> sync_report.md
            fi
            echo "" >> sync_report.md
          done

      # 同步 Releases
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || sudo apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Sync Releases
        run: |
          # 解析上游倉庫資訊
          UPSTREAM_URL="${{ env.UPSTREAM_REPO }}"
          # 移除 .git 結尾（如果存在）
          UPSTREAM_URL=${UPSTREAM_URL%.git}
          # 移除 https://github.com/ 前綴（如果存在）
          UPSTREAM_URL=${UPSTREAM_URL#https://github.com/}
          # 分割所有者和倉庫名
          UPSTREAM_OWNER=$(echo "$UPSTREAM_URL" | cut -d'/' -f1)
          UPSTREAM_REPO=$(echo "$UPSTREAM_URL" | cut -d'/' -f2)
          CURRENT_REPO="${GITHUB_REPOSITORY#*/}"
          
          echo "Syncing releases from ${UPSTREAM_OWNER}/${UPSTREAM_REPO} to ${CURRENT_REPO}..."
          
          # 檢查倉庫是否可訪問
          if ! gh repo view "${UPSTREAM_OWNER}/${UPSTREAM_REPO}" &>/dev/null; then
            echo "Error: Cannot access repository ${UPSTREAM_OWNER}/${UPSTREAM_REPO}"
            echo "Please check if the repository exists and is accessible"
            exit 1
          fi
          
          # 獲取上游的所有 releases
          releases=$(gh api repos/${UPSTREAM_OWNER}/${UPSTREAM_REPO}/releases --paginate)
          
          # 遍歷每個 release
          echo "$releases" | jq -c '.[]' | while read -r release; do
            tag_name=$(echo "$release" | jq -r '.tag_name')
            name=$(echo "$release" | jq -r '.name')
            body=$(echo "$release" | jq -r '.body')
            draft=$(echo "$release" | jq -r '.draft')
            prerelease=$(echo "$release" | jq -r '.prerelease')
            
            echo "Processing release: $tag_name"
            
            # 檢查 release 是否已存在
            if ! gh release view "$tag_name" &>/dev/null; then
              echo "Creating release $tag_name..."
              
              # 創建 release
              create_args=()
              [ "$draft" = "true" ] && create_args+=(--draft)
              [ "$prerelease" = "true" ] && create_args+=(--prerelease)
              
              gh release create "$tag_name" "${create_args[@]}" \
                --title "$name" \
                --notes "$body" || echo "Failed to create release $tag_name"
              
              # 如果有資源文件，下載並上傳
              assets=$(echo "$release" | jq -r '.assets[].browser_download_url')
              if [ ! -z "$assets" ]; then
                temp_dir=$(mktemp -d)
                echo "$assets" | while read -r asset_url; do
                  asset_name=$(basename "$asset_url")
                  echo "Downloading asset: $asset_name"
                  curl -L -o "$temp_dir/$asset_name" "$asset_url"
                  echo "Uploading asset: $asset_name"
                  gh release upload "$tag_name" "$temp_dir/$asset_name" --clobber || echo "Failed to upload asset $asset_name"
                done
                rm -rf "$temp_dir"
              fi
            else
              echo "Release $tag_name already exists, skipping..."
            fi
          done
          
          echo "Done syncing releases"
          
      - name: Update Sync Report with Releases Status
        run: |
          echo "## Releases Sync Status" >> sync_report.md
          echo "Upstream releases:" >> sync_report.md
          gh release list --repo ${{ env.UPSTREAM_REPO }} >> sync_report.md
          echo "" >> sync_report.md
          echo "Local releases:" >> sync_report.md
          gh release list >> sync_report.md
          echo "" >> sync_report.md

      - name: Upload sync report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sync-report
          path: sync_report.md
